/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ustunerturizm2;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author iserh
 */
public class frmKoltukEkrani extends javax.swing.JFrame {

    DefaultListModel model = new DefaultListModel();
    DefaultTableModel dfmodel = new DefaultTableModel();
    private int turid;
    private int selectedRow;

    /**
     * Creates new form frmTurYolcuBelirleme
     */
    public frmKoltukEkrani() {
        initComponents();
        setKoltukLayout();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frmMusteriOlusturveEkle = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        txtAd = new javax.swing.JTextField();
        txtSoyad = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTCKN = new javax.swing.JTextField();
        txtTelNo = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtHESKod = new javax.swing.JTextField();
        txtGecmisTurlar = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtIstenenTurlar = new javax.swing.JTextField();
        txtYorum = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnEkle = new javax.swing.JButton();
        optCancelContinue = new javax.swing.JOptionPane();
        eklemeBasarili = new javax.swing.JDialog();
        frmListedenEkle = new javax.swing.JFrame();
        jLabel20 = new javax.swing.JLabel();
        txtAramaSoyad1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMusteriler1 = new javax.swing.JTable();
        jLabel21 = new javax.swing.JLabel();
        txtAramaAd1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnAra1 = new javax.swing.JButton();
        btnListedenEkle1 = new javax.swing.JButton();

        frmMusteriOlusturveEkle.setMinimumSize(new java.awt.Dimension(450, 470));

        jLabel2.setText("Ad");

        jLabel3.setText("Soyad");

        jLabel4.setText("TC Kimlik Numarası");

        jLabel5.setText("Telefon Numarası");

        jLabel6.setText("HES Kodu");

        jLabel7.setText("Katıldığı Turlar");

        jLabel8.setText("Katılmak İstediği Turlar");

        jLabel9.setText("Müşteri Hakkında Yorum");

        btnEkle.setText("Ekle");
        btnEkle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEkleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frmMusteriOlusturveEkleLayout = new javax.swing.GroupLayout(frmMusteriOlusturveEkle.getContentPane());
        frmMusteriOlusturveEkle.getContentPane().setLayout(frmMusteriOlusturveEkleLayout);
        frmMusteriOlusturveEkleLayout.setHorizontalGroup(
            frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmMusteriOlusturveEkleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel8))
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtYorum, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEkle, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtSoyad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                        .addComponent(txtAd, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtHESKod, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtIstenenTurlar, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtTCKN, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtTelNo, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtGecmisTurlar, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        frmMusteriOlusturveEkleLayout.setVerticalGroup(
            frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, frmMusteriOlusturveEkleLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSoyad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTCKN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHESKod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGecmisTurlar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIstenenTurlar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmMusteriOlusturveEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtYorum, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(27, 27, 27)
                .addComponent(btnEkle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout eklemeBasariliLayout = new javax.swing.GroupLayout(eklemeBasarili.getContentPane());
        eklemeBasarili.getContentPane().setLayout(eklemeBasariliLayout);
        eklemeBasariliLayout.setHorizontalGroup(
            eklemeBasariliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        eklemeBasariliLayout.setVerticalGroup(
            eklemeBasariliLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        frmListedenEkle.setMinimumSize(new java.awt.Dimension(628, 272));

        jLabel20.setText("Soyad");

        tblMusteriler1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Ad", "Soyad", "TC Kimlik No", "Tel No"
            }
        ));
        tblMusteriler1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMusteriler1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblMusteriler1);

        jLabel21.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel21.setText("Arama");

        txtAramaAd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAramaAd1ActionPerformed(evt);
            }
        });

        jLabel10.setText("Ad");

        btnAra1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        btnAra1.setText("Ara");
        btnAra1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAra1ActionPerformed(evt);
            }
        });

        btnListedenEkle1.setText("Ekle");
        btnListedenEkle1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListedenEkle1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout frmListedenEkleLayout = new javax.swing.GroupLayout(frmListedenEkle.getContentPane());
        frmListedenEkle.getContentPane().setLayout(frmListedenEkleLayout);
        frmListedenEkleLayout.setHorizontalGroup(
            frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmListedenEkleLayout.createSequentialGroup()
                .addGroup(frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(frmListedenEkleLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(frmListedenEkleLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtAramaAd1)
                                        .addComponent(txtAramaSoyad1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(frmListedenEkleLayout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(btnAra1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(frmListedenEkleLayout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(btnListedenEkle1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        frmListedenEkleLayout.setVerticalGroup(
            frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(frmListedenEkleLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnListedenEkle1)
                .addGap(25, 25, 25))
            .addGroup(frmListedenEkleLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAramaAd1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(frmListedenEkleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAramaSoyad1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAra1)
                .addContainerGap(116, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 381, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean isTCKNRegistered() throws SQLException {
        boolean flag = true;
        Connection connection = null;
        DbHelper helper = new DbHelper();
        Statement statement = null;
        ResultSet resultSet;
        try {
            connection = helper.getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery("Select * from musteri WHERE TCKN=" + txtTCKN.getText());
            flag = (resultSet.isBeforeFirst());

        } catch (SQLException e) {
            helper.showErrorMessage(e);

        } finally {
            statement.close();
            connection.close();
        }

        return flag;
    }

    private boolean isTelNoRegistered() throws SQLException {
        boolean flag = true;
        Connection connection = null;
        DbHelper helper = new DbHelper();
        Statement statement = null;
        ResultSet resultSet;
        try {
            connection = helper.getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery("Select * from musteri WHERE TelNo=" + txtTelNo.getText());
            flag = (resultSet.isBeforeFirst());

        } catch (SQLException e) {
            helper.showErrorMessage(e);

        } finally {
            statement.close();
            connection.close();
        }

        return flag;
    }
    int yolcuid;
    int koltuknumara;
    List<JButton> buttonList = new ArrayList<>();
    Color dolukoltuk = new Color(247, 9, 43);
    Color boskoltuk = new Color(97, 222, 132);
    private void btnEkleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEkleActionPerformed
        // TODO add your handling code here:
        boolean flag = true;
        Connection connection = null;
        DbHelper helper = new DbHelper();
        PreparedStatement statement = null;

        if (txtTCKN.getText().length() != 11 || (Integer.valueOf(txtTCKN.getText().charAt(txtTCKN.getText().length() - 1))) % 2 != 0) {
            //tckn kısa veya tek sayıyla bitiyorsa
            //tckn hatalı mesajı göster
        } else {
            try {
                if (isTCKNRegistered()) {
                    Object[] options = {"Yine de kaydet", "İptal et"};
                    int n = JOptionPane.showOptionDialog(optCancelContinue,
                            "Bu TC Kimlik Numarası ile kayıtlı bir kullanıcı mevcut.",
                            "Kullanıcı zaten kayıtlı",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            options[0]);
                    switch (n) {
                        case JOptionPane.YES_OPTION:
                            flag = true;
                            break;
                        case JOptionPane.NO_OPTION:
                            flag = false;
                            break;
                        default:
                            flag = false;
                            break;
                    }
                } else if (isTelNoRegistered()) {
                    Object[] options = {"Yine de kaydet", "İptal et"};
                    int n = JOptionPane.showOptionDialog(optCancelContinue,
                            "Bu Telefon Numarası ile kayıtlı bir kullanıcı mevcut.",
                            "Kullanıcı zaten kayıtlı",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            options[0]);
                    switch (n) {
                        case JOptionPane.YES_OPTION:
                            flag = true;
                            break;
                        case JOptionPane.NO_OPTION:
                            flag = false;
                            break;
                        default:
                            flag = false;
                            break;
                    }
                } else {
                    //Continue
                }
            } catch (SQLException ex) {
                Logger.getLogger(frmMusteriEkle.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (flag) {
                try {
                    connection = helper.getConnection();
                    String sql = "insert into musteri(Ad,Soyad,TCKN,TelNo,HESKod,GecmisTurlar,IstenenTurlar,Yorum) values(?,?,?,?,?,?,?,?)";
                    statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                    statement.setString(1, txtAd.getText());
                    statement.setString(2, txtSoyad.getText());
                    statement.setString(3, txtTCKN.getText());
                    statement.setString(4, txtTelNo.getText());
                    statement.setString(5, txtHESKod.getText());
                    statement.setString(6, txtGecmisTurlar.getText());
                    statement.setString(7, txtIstenenTurlar.getText());
                    statement.setString(8, txtYorum.getText());

                    txtAd.setText("");
                    txtSoyad.setText("");
                    txtTCKN.setText("");
                    txtTelNo.setText("");
                    txtHESKod.setText("");
                    txtGecmisTurlar.setText("");
                    txtIstenenTurlar.setText("");
                    txtYorum.setText("");
                    statement.executeUpdate();
                    ResultSet rs = statement.getGeneratedKeys();
                    rs.next();
                    yolcuid = (int) rs.getLong(1);
                    eklemeBasarili.setLocationRelativeTo(null);
                    eklemeBasarili.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
                    eklemeBasarili.setVisible(true);
                    statement.close();
                    connection.close();
                    connection = helper.getConnection();
                    sql = "UPDATE koltuk SET yolcuid=? WHERE turid=" + turid + " AND WHERE koltuknumara=" + koltuknumara;
                    statement = connection.prepareStatement(sql);
                    statement.setInt(1, yolcuid);
                    statement.executeUpdate();
                    buttonList.get(koltuknumara - 1).setBackground(dolukoltuk);
                } catch (SQLException e) {
                    helper.showErrorMessage(e);
                } finally {
                    try {
                        statement.close();
                        connection.close();
                    } catch (SQLException ex) {
                        Logger.getLogger(frmMusteriEkle.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                //Action Cancelled
            }
        }
    }//GEN-LAST:event_btnEkleActionPerformed

    public ArrayList<Musteri> getMusteri() throws SQLException {
        Connection connection = null;
        DbHelper helper = new DbHelper();
        Statement statement = null;
        ResultSet resultSet;
        ArrayList<Musteri> musteriler = null;
        try {
            connection = helper.getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery("Select * from musteri");
            musteriler = new ArrayList<>();
            while (resultSet.next()) {
                musteriler.add(new Musteri(resultSet.getInt("ID"),
                        resultSet.getString("Ad"),
                        resultSet.getString("Soyad"),
                        resultSet.getString("TCKN"),
                        resultSet.getString("TelNo"),
                        resultSet.getString("HESKod"),
                        resultSet.getString("GecmisTurlar"),
                        resultSet.getString("IstenenTurlar"),
                        resultSet.getString("Yorum")));

            }
        } catch (SQLException e) {
            helper.showErrorMessage(e);

        } finally {
            statement.close();
            connection.close();
        }
        return musteriler;

    }

    public void populateTable() {
        dfmodel.setRowCount(0);
        dfmodel = (DefaultTableModel) tblMusteriler1.getModel();
        try {
            ArrayList<Musteri> musteriler = getMusteri();
            for (Musteri musteri : musteriler) {
                Object[] row = {
                    musteri.getId(),
                    musteri.getIsim(),
                    musteri.getSoyisim(),
                    musteri.getTckimlikno(),
                    musteri.getHeskodu()};
                dfmodel.addRow(row);

            }
            if (tblMusteriler1.getColumnName(0).equals("ID")) {
                tblMusteriler1.removeColumn(tblMusteriler1.getColumn("ID"));
            }
        } catch (SQLException ex) {
            DbHelper help = new DbHelper();
            help.showErrorMessage(ex);
        }
    }
    private void tblMusteriler1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMusteriler1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblMusteriler1MouseClicked

    private void txtAramaAd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAramaAd1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAramaAd1ActionPerformed

    private void btnAra1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAra1ActionPerformed
        // TODO add your handling code here:
        List<RowFilter<Object, Object>> filters = new ArrayList<>(2);
        filters.add(RowFilter.regexFilter(txtAramaAd1.getText(), 1));
        filters.add(RowFilter.regexFilter(txtAramaSoyad1.getText(), 2));
        TableRowSorter tableRowSorter = new TableRowSorter<>(dfmodel);
        tblMusteriler1.setRowSorter(tableRowSorter);
        tableRowSorter.setRowFilter(RowFilter.andFilter(filters));
    }//GEN-LAST:event_btnAra1ActionPerformed
    boolean listedenekleFlag = false;
    private void btnListedenEkle1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListedenEkle1ActionPerformed
        // TODO add your handling code here:
        listedenekleFlag = false;
        yolcuid = (Integer) tblMusteriler1.getModel().getValueAt(tblMusteriler1.convertRowIndexToModel(selectedRow), 0);
        Connection connection = null;
        DbHelper helper = new DbHelper();
        PreparedStatement statement = null;
        try {
            connection = helper.getConnection();
            String sql = "UPDATE koltuk SET yolcuid=? WHERE turid=" + turid + " AND  koltuknumara= " + koltuknumara;
            statement = connection.prepareStatement(sql);
            statement.setInt(1, yolcuid);
            statement.executeUpdate();
            buttonList.get(koltuknumara - 1).setBackground(dolukoltuk);

        } catch (SQLException ex) {
            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                statement.close();
                connection.close();

                frmListedenEkle.dispose();
            } catch (SQLException ex) {
                Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_btnListedenEkle1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmKoltukEkrani.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new frmKoltukEkrani().setVisible(true);
        });
    }

    /**
     * @return the turid
     */
    public int getTurid() {
        return turid;
    }

    /**
     * @param turid the turid to set
     */
    public void setTurid(int turid) {
        this.turid = turid;
    }
    Tur seciliTur = null;

    public Tur getSeciliTur() throws SQLException {
        Connection connection = null;
        DbHelper helper = new DbHelper();
        Statement statement = null;
        ResultSet resultSet;
        try {
            connection = helper.getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery("Select * from turlar WHERE ID=" + turid);
            while (resultSet.next()) {
                seciliTur = new Tur(resultSet.getInt("ID"),
                        resultSet.getString("turadi"),
                        resultSet.getString("hareket_tarihi"),
                        resultSet.getString("donus_tarihi"),
                        resultSet.getString("hareket_saati"),
                        resultSet.getString("hareket_yeri"),
                        resultSet.getString("tur_danismani"),
                        resultSet.getInt("tur_otobusu_id"));

            }

        } catch (SQLException ex) {
            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            connection.close();
            statement.close();
        }
        return seciliTur;
    }
    int koltuksayisi = 0;

    public void getKoltukSayisi() throws SQLException {
        seciliTur = getSeciliTur();
        Connection connection = null;
        DbHelper helper = new DbHelper();
        Statement statement = null;
        ResultSet resultSet;
        try {
            connection = helper.getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery("Select koltuksayisi from otobus WHERE ID=" + seciliTur.getTur_otobusu_id());
            while (resultSet.next()) {
                koltuksayisi = resultSet.getInt("koltuksayisi");
            }
        } catch (SQLException ex) {
            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            connection.close();
            statement.close();
        }
    }

    public void createKoltuk() throws SQLException {
        seciliTur = getSeciliTur();
        Connection connection = null;
        DbHelper helper = new DbHelper();
        Statement statement = null;
        PreparedStatement pstatement;
        ResultSet resultSet;
        try {
            connection = helper.getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery("Select koltuksayisi from otobus WHERE ID=" + seciliTur.getTur_otobusu_id());
            while (resultSet.next()) {
                koltuksayisi = resultSet.getInt("koltuksayisi");
            }
        } catch (SQLException ex) {
            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            connection.close();
            statement.close();
        }

        try {
            connection = helper.getConnection();
            String sql = "insert into koltuk(otobusid,yolcuid,koltuknumara,turid) values(?,?,?,?)";
            pstatement = connection.prepareStatement(sql);
            for (int i = 1; i <= koltuksayisi; i++) {
                pstatement.setInt(1, seciliTur.getTur_otobusu_id());
                pstatement.setInt(2, 0);
                pstatement.setInt(3, i);
                pstatement.setInt(4, turid);
                pstatement.execute();
            }

        } catch (SQLException ex) {
            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            connection.close();
            statement.close();
        }
    }

    public void setKoltukLayout() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
        Connection connection = null;
        DbHelper helper = new DbHelper();
        Statement statement = null;
        ResultSet resultSet;
        JPanel panel;
        Color kapi = new Color(184, 176, 177);

        if (koltuksayisi < 25) {

            int koltukno = 0;
            int rows = 4;
            int columns = 1 + ((koltuksayisi - 4) / 3);
            panel = new JPanel(new GridLayout(columns, rows));
            for (int column = 0; column < columns; column++) {
                for (int row = 0; row < rows; row++) {
                    koltukno++;
                    final JButton button = new JButton("Row " + row + " seat " + column);
                    button.setRolloverEnabled(false);
                    button.setFocusable(false);
                    if (row == 2 && column + 1 != columns) {
                        button.setVisible(false);
                        koltukno--;
                    } else {
                        button.setText(String.valueOf(koltukno));
                        try {

                            connection = helper.getConnection();
                            statement = connection.createStatement();
                            resultSet = statement.executeQuery("Select yolcuid from koltuk WHERE koltuknumara=" + koltukno + " AND turid= " + turid);
                            resultSet.next();
                            if (resultSet.getInt("yolcuid") == 0) {
                                button.setBackground(boskoltuk);
                            } else {
                                button.setBackground(dolukoltuk);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                        } finally {
                            try {
                                statement.close();
                                connection.close();
                            } catch (SQLException ex) {
                                Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }

                        button.addActionListener((java.awt.event.ActionEvent evt) -> {
                            koltuknumara = Integer.valueOf(button.getText());
                            if (button.getBackground() == dolukoltuk) {
                                //müşteriyi silme butonu pop up
                                String ad = null;
                                String soyad = null;
                                int idyolcu = 0;
                                Connection connection1 = null;
                                DbHelper helper1 = new DbHelper();
                                PreparedStatement pstatement = null;
                                Connection connection2 = null;
                                DbHelper helper2 = new DbHelper();
                                ResultSet resultSet2 = null;
                                Statement statement2 = null;
                                Connection connection3 = null;
                                DbHelper helper3 = new DbHelper();
                                Statement statement3 = null;
                                ResultSet resultSet3;
                                try {

                                    connection3 = helper3.getConnection();
                                    statement3 = connection3.createStatement();
                                    resultSet3 = statement3.executeQuery("Select yolcuid from koltuk WHERE koltuknumara=" + button.getText() + " AND turid= " + turid);
                                    resultSet3.next();
                                    idyolcu=resultSet3.getInt("yolcuid");

                                } catch (SQLException ex) {
                                    Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                } finally {
                                    try {
                                        statement3.close();
                                        connection3.close();
                                    } catch (SQLException ex) {
                                        Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                }
                                System.out.println(idyolcu);
                                System.out.println(turid);
                                Object[] options = {"Sil", "İptal et"};
                                try {
                                    connection2 = helper2.getConnection();
                                    statement2 = connection2.createStatement();
                                    resultSet2 = statement2.executeQuery("SELECT * FROM musteri WHERE ID= " + idyolcu);
                                    resultSet2.next();
                                    ad = resultSet2.getString("Ad");
                                    soyad = resultSet2.getString("Soyad");
                                } catch (SQLException e) {
                                    System.out.println(e);
                                } finally {
                                    try {
                                        statement2.close();
                                        resultSet2.close();
                                    } catch (SQLException ex) {
                                        Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                                int n = JOptionPane.showOptionDialog(optCancelContinue,
                                        ad + " " + soyad + " " + "kişisini koltuktan silmek istiyor musunuz?",
                                        "Koltuk Dolu",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null,
                                        options,
                                        options[0]);
                                switch (n) {
                                    case JOptionPane.YES_OPTION:
                                        try {
                                        connection1 = helper1.getConnection();
                                        String sql = "DELETE from koltuk WHERE turid=" + turid + " AND koltuknumara=" + button.getText();
                                        pstatement = connection1.prepareStatement(sql);
                                        pstatement.execute();
                                        button.setBackground(boskoltuk);
                                    } catch (SQLException ex) {
                                        Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        try {
                                            connection1.close();
                                            pstatement.close();
                                        } catch (SQLException ex) {
                                            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                    break;
                                    case JOptionPane.NO_OPTION:
                                        break;
                                    //Hiçbir şey yapma
                                    default:
                                        break;
                                }
                            } else {
                                //müşteriyi oluştur ve ekle
                                // veya
                                //kayıtlı müşterilerden ekle
                                Object[] options = {"Yolcu oluştur ve ekle", "Kayıtlı yolculardan ekle"};
                                int n = JOptionPane.showOptionDialog(optCancelContinue,
                                        "Koltuğa eklemek için listeden yolcu seçin veya yeni yolcu oluşturun",
                                        "Koltuğa yolcu ekle",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null,
                                        options,
                                        options[0]);
                                switch (n) {
                                    case JOptionPane.YES_OPTION:
                                        frmMusteriOlusturveEkle.setLocationRelativeTo(null);
                                        frmMusteriOlusturveEkle.setVisible(true);
                                        break;
                                    case JOptionPane.NO_OPTION:
                                        populateTable();
                                        frmListedenEkle.setLocationRelativeTo(null);
                                        frmListedenEkle.setVisible(true);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        });
                        buttonList.add(button);
                    }

                    panel.add(button);
                    panel.setSize(rows * 75, columns * 50);
                    this.add(panel);
                }
            }
        } else if (koltuksayisi < 35 && koltuksayisi > 25) {
            int koltukno = 0;
            int rows = 5;
            int columns = 2 + ((koltuksayisi - 5) / 4);
            panel = new JPanel(new GridLayout(columns, rows));
            for (int column = 0; column < columns; column++) {
                for (int row = 0; row < rows; row++) {
                    koltukno++;
                    final JButton button = new JButton("Row " + row + " seat " + column);
                    button.setRolloverEnabled(false);
                    button.setBorderPainted(false);
                    button.setFocusable(false);
                    if (row == 2 && column + 1 != columns) {
                        button.setVisible(false);
                        koltukno--;
                    } else if ((row == 3 && column + 2 == columns) || (row == 4 && column + 2 == columns)) {
                        button.setText("Kapı");
                        button.setBackground(kapi);
                        koltukno--;
                    } else {
                        button.setText(String.valueOf(koltukno));
                        try {

                            connection = helper.getConnection();
                            statement = connection.createStatement();
                            resultSet = statement.executeQuery("Select yolcuid from koltuk WHERE koltuknumara=" + koltukno + " AND turid= " + turid);
                            resultSet.next();
                            if (resultSet.getInt("yolcuid") == 0) {
                                button.setBackground(boskoltuk);
                            } else {
                                button.setBackground(dolukoltuk);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        button.addActionListener((ActionEvent actionEvent) -> {
                            koltuknumara = Integer.valueOf(button.getText());
                            if (button.getBackground() == dolukoltuk) {
                                //müşteriyi silme butonu pop up
                                Connection connection1 = null;
                                DbHelper helper1 = new DbHelper();
                                PreparedStatement pstatement = null;
                                Object[] options = {"Sil", "İptal et"};
                                int n = JOptionPane.showOptionDialog(optCancelContinue,
                                        "Müşteriyi koltuktan silmek istiyor musunuz?",
                                        "Koltuk Dolu",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null,
                                        options,
                                        options[0]);
                                switch (n) {
                                    case JOptionPane.YES_OPTION:
                                        try {
                                        connection1 = helper1.getConnection();
                                        String sql = "DELETE from koltuk WHERE turid=" + turid + " AND koltuknumara=" + button.getText();
                                        pstatement = connection1.prepareStatement(sql);
                                        pstatement.execute();
                                        System.out.println("Silindi");
                                        button.setBackground(boskoltuk);
                                    } catch (SQLException ex) {
                                        Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        try {
                                            connection1.close();
                                            pstatement.close();
                                        } catch (SQLException ex) {
                                            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                    break;
                                    //Hiçbir şey yapma
                                    case JOptionPane.NO_OPTION:
                                        break;
                                    //Hiçbir şey yapma
                                    default:
                                        break;
                                }
                            } else {
                                //müşteriyi oluştur ve ekle
                                // veya
                                //kayıtlı müşterilerden ekle
                                Object[] options = {"Yolcu oluştur ve ekle", "Kayıtlı yolculardan ekle"};
                                int n = JOptionPane.showOptionDialog(optCancelContinue,
                                        "Koltuğa eklemek için listeden yolcu seçin veya yeni yolcu oluşturun",
                                        "Koltuğa yolcu ekle",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null,
                                        options,
                                        options[0]);
                                switch (n) {
                                    case JOptionPane.YES_OPTION:
                                        frmMusteriOlusturveEkle.setLocationRelativeTo(null);
                                        frmMusteriOlusturveEkle.setVisible(true);
                                        break;
                                    case JOptionPane.NO_OPTION:
                                        populateTable();
                                        frmListedenEkle.setLocationRelativeTo(null);
                                        frmListedenEkle.setVisible(true);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        });
                        buttonList.add(button);
                    }
                    panel.add(button);
                    panel.setSize(rows * 75, columns * 50);
                    this.add(panel);
                }
            }

        } else {
            int koltukno = 0;
            int rows = 5;
            int columns = 2 + ((koltuksayisi - 5) / 4);
            panel = new JPanel(new GridLayout(columns, rows));
            for (int column = 0; column < columns; column++) {
                for (int row = 0; row < rows; row++) {
                    koltukno++;
                    final JButton button = new JButton("Row " + row + " seat " + column);
                    button.setRolloverEnabled(false);
                    button.setBorderPainted(false);
                    button.setFocusable(false);
                    if (row == 2 && column + 1 != columns) {
                        button.setVisible(false);
                        koltukno--;
                    } else if ((row == 3 && column == columns / 2) || (row == 4 && column == columns / 2)) {
                        button.setText("Kapı");
                        button.setBackground(kapi);
                        koltukno--;
                    } else {
                        button.setText(String.valueOf(koltukno));
                        try {

                            connection = helper.getConnection();
                            statement = connection.createStatement();
                            resultSet = statement.executeQuery("Select yolcuid from koltuk WHERE koltuknumara=" + koltukno + " AND turid= " + turid);
                            resultSet.next();
                            if (resultSet.getInt("yolcuid") == 0) {
                                button.setBackground(boskoltuk);
                            } else {
                                button.setBackground(dolukoltuk);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        button.addActionListener((ActionEvent actionEvent) -> {
                            koltuknumara = Integer.valueOf(button.getText());
                            if (button.getBackground() == dolukoltuk) {
                                //müşteriyi silme butonu pop up
                                Connection connection1 = null;
                                DbHelper helper1 = new DbHelper();
                                PreparedStatement pstatement = null;
                                Object[] options = {"Sil", "İptal et"};
                                int n = JOptionPane.showOptionDialog(optCancelContinue,
                                        "Müşteriyi koltuktan silmek istiyor musunuz?",
                                        "Koltuk Dolu",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null,
                                        options,
                                        options[0]);
                                switch (n) {
                                    case JOptionPane.YES_OPTION:
                                        try {
                                        connection1 = helper1.getConnection();
                                        String sql = "DELETE from koltuk WHERE turid=" + turid + " AND koltuknumara=" + button.getText();
                                        pstatement = connection1.prepareStatement(sql);
                                        pstatement.execute();
                                        System.out.println("Silindi");
                                        button.setBackground(boskoltuk);
                                    } catch (SQLException ex) {
                                        Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        try {
                                            connection1.close();
                                            pstatement.close();
                                        } catch (SQLException ex) {
                                            Logger.getLogger(frmKoltukEkrani.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                    break;
                                    //Hiçbir şey yapma
                                    case JOptionPane.NO_OPTION:
                                        break;
                                    //Hiçbir şey yapma
                                    default:
                                        break;
                                }
                            } else {
                                //müşteriyi oluştur ve ekle
                                // veya
                                //kayıtlı müşterilerden ekle
                                Object[] options = {"Yolcu oluştur ve ekle", "Kayıtlı yolculardan ekle"};
                                int n = JOptionPane.showOptionDialog(optCancelContinue,
                                        "Koltuğa eklemek için listeden yolcu seçin veya yeni yolcu oluşturun",
                                        "Koltuğa yolcu ekle",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.QUESTION_MESSAGE,
                                        null,
                                        options,
                                        options[0]);
                                switch (n) {
                                    case JOptionPane.YES_OPTION:
                                        frmMusteriOlusturveEkle.setLocationRelativeTo(null);
                                        frmMusteriOlusturveEkle.setVisible(true);
                                        break;
                                    case JOptionPane.NO_OPTION:
                                        populateTable();
                                        frmListedenEkle.setLocationRelativeTo(null);
                                        frmListedenEkle.setVisible(true);
                                        break;
                                    default:
                                        break;
                                }
                            }
                        });
                        buttonList.add(button);
                    }
                    panel.add(button);
                    panel.setSize(rows * 75, columns * 50);
                    this.add(panel);
                }
            }

        }
        this.setPreferredSize(new Dimension(panel.getWidth() + 15, panel.getHeight() + 40));

        //this.setLayout(panel.getLayout());
        this.pack();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAra1;
    private javax.swing.JButton btnEkle;
    private javax.swing.JButton btnListedenEkle1;
    private javax.swing.JDialog eklemeBasarili;
    private javax.swing.JFrame frmListedenEkle;
    private javax.swing.JFrame frmMusteriOlusturveEkle;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JOptionPane optCancelContinue;
    private javax.swing.JTable tblMusteriler1;
    private javax.swing.JTextField txtAd;
    private javax.swing.JTextField txtAramaAd1;
    private javax.swing.JTextField txtAramaSoyad1;
    private javax.swing.JTextField txtGecmisTurlar;
    private javax.swing.JTextField txtHESKod;
    private javax.swing.JTextField txtIstenenTurlar;
    private javax.swing.JTextField txtSoyad;
    private javax.swing.JTextField txtTCKN;
    private javax.swing.JTextField txtTelNo;
    private javax.swing.JTextField txtYorum;
    // End of variables declaration//GEN-END:variables
}
